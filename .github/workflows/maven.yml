# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Check Maven Version
      run: mvn --version

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    #- name: Build and push
     # run: mvn clean install jib:build -Djib.from-platforms="linux/amd64,linux/arm64" -Djib.to.image=hendisantika/customer -Djib.to.tags=${{ github.run_number }},latest -Djib.to.auth.username=${{ secrets.DOCKERHUB_USERNAME }} -Djib.to.auth.password=${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push to Cloud Raya
      run: |
        docker login registry.cloudraya.com --username='${{ secrets.CLOUDRAYA_USERNAME }}' --password='${{ secrets.CLOUDRAYA_PASSWORD }}'
        mvn clean install jib:build -Djib.from-platforms="linux/amd64,linux/arm64" -Djib.to.image=registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}/customer-app -Djib.to.tags=${{ github.run_number }},latest -Djib.to.auth.username='${{ secrets.CLOUDRAYA_USERNAME }}' -Djib.to.auth.password='${{ secrets.CLOUDRAYA_PASSWORD }}'
      #        docker build -t registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}/customer-app:${{ github.run_number }} .
      #        docker push registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}/customer-app:${{ github.run_number }}

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@b275d12641ac2d2108b2cbb7598b154ad2f2cee8


  deploy:
    needs: build
    name: deploy image
    runs-on: ubuntu-24.04
    environment: development
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Add Server key
        run: |
          touch key.txt && echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.txt
          chmod 600 key.txt

      - name: Create SSH key
        run: |
          mkdir ~/customer-app
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
          sudo chmod 600 ~/.ssh/private.key
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          sudo chmod 600 ~/.ssh/known_hosts
        shell: bash
        env:
          SERVER_HOST: ${{ vars.SSH_HOST }}
          SERVER_HOST_CLOUDRAYA: ${{ vars.SSH_HOST_CLOUDRAYA }}
          SERVER_PORT: ${{ vars.SSH_PORT }}
          SERVER_USERNAME: ${{ vars.SSH_USERNAME }}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          SSH_KNOWN_HOSTS: ${{vars.SSH_HOST}}
          SSH_KNOWN_HOSTS_CLOUDRAYA: ${{vars.SSH_HOST_CLOUDRAYA}}

      - name: Set all environment variables
        env:
          SERVER_HOST: ${{ vars.SSH_HOST }}
          SERVER_HOST_CLOUDRAYA: ${{ vars.SSH_HOST_CLOUDRAYA }}
          SERVER_PORT: ${{ vars.SSH_PORT }}
          SERVER_USERNAME: ${{ vars.SSH_USERNAME }}
          IMAGE_NAME: customer
          IMAGE_TAG: ${{ github.run_number }}
          CONTAINER_NAME: customer-app
          CLOUDRAYA_REGISTRY_URL: ${{ vars.CLOUDRAYA_REGISTRY_URL }}
          CLOUDRAYA_REGISTRY_USERNAME: ${{ secrets.CLOUDRAYA_USERNAME }}
          CLOUDRAYA_REGISTRY_PASSWORD: ${{ secrets.CLOUDRAYA_PASSWORD }}

          APP_SERVER_PORT: ${{ vars.APP_SERVER_PORT_DEV }}
          APP_ENVIRONMENT: ${{ vars.APP_ENVIRONMENT_DEV }}
          SPRING_PROFILES_ACTIVE: ${{ vars.SPRING_PROFILES_ACTIVE_DEV }}

        run: |
          echo CONTAINER_NAME=$CONTAINER_NAME >> .env
          echo IMAGE_NAME=$IMAGE_NAME >> .env
          echo IMAGE_TAG=$IMAGE_TAG >> .env
          echo APP_SERVER_PORT=$APP_SERVER_PORT >> .env
          echo APP_ENVIRONMENT=$APP_ENVIRONMENT >> .env
          echo SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE >> .env
          echo CLOUDRAYA_REGISTRY_URL=$CLOUDRAYA_REGISTRY_URL >> .env
          echo CLOUDRAYA_REGISTRY_USERNAME=$CLOUDRAYA_REGISTRY_USERNAME >> .env
          echo CLOUDRAYA_REGISTRY_PASSWORD=$CLOUDRAYA_REGISTRY_PASSWORD >> .env

      #      - name: Copy all environment variables to Cloud Raya 1
      #        uses: appleboy/scp-action@v1.0.0
      #        with:
      #          host: ${{ vars.SSH_HOST }}
      #          username: ${{ vars.SSH_USERNAME }}
      #          key: ${{ secrets.SSH_PRIVATE_KEY }}
      #          port: ${{ vars.SSH_PORT }}
      #          source: "./.env"  # Path to the file on your runner
      #          target: "~/customer-app"  # Target directory on the server

      - name: Copy all environment variables to Cloud Raya 2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ vars.SSH_HOST_CLOUDRAYA }}
          username: ${{ vars.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT }}
          source: "./.env"  # Path to the file on your runner
          target: "~/customer-app"  # Target directory on the server

      #      - name: Run the application in Cloud Raya 1
      #        env:
      #          SERVER_HOST: ${{ vars.SSH_HOST }}
      #          SERVER_PORT: ${{ vars.SSH_PORT }}
      #          SERVER_USERNAME: ${{ vars.SSH_USERNAME }}
      #          IMAGE_TAG: ${{ github.run_number }}
      #
      #          APP_SERVER_PORT: ${{ vars.APP_SERVER_PORT_DEV }}
      #          APP_ENVIRONMENT: ${{ vars.APP_ENVIRONMENT_DEV }}
      #          SPRING_PROFILES_ACTIVE: ${{ vars.SPRING_PROFILES_ACTIVE_DEV }}
      #          CLOUDRAYA_REGISTRY_URL: ${{ vars.CLOUDRAYA_REGISTRY_URL }}
      #          CLOUDRAYA_REGISTRY_USERNAME: ${{ secrets.CLOUDRAYA_USERNAME }}
      #          CLOUDRAYA_REGISTRY_PASSWORD: ${{ secrets.CLOUDRAYA_PASSWORD }}
      #
      #        run: |
      #          set -e
      #          ./deploy.sh


      - name: Run the application in Cloud Raya 2
        env:
          SERVER_HOST: ${{ vars.SSH_HOST_CLOUDRAYA }}
          SERVER_PORT: ${{ vars.SSH_PORT }}
          SERVER_USERNAME: ${{ vars.SSH_USERNAME }}
          IMAGE_TAG: ${{ github.run_number }}

          APP_SERVER_PORT: ${{ vars.APP_SERVER_PORT_DEV }}
          APP_ENVIRONMENT: ${{ vars.APP_ENVIRONMENT_DEV }}
          SPRING_PROFILES_ACTIVE: ${{ vars.SPRING_PROFILES_ACTIVE_DEV }}
          CLOUDRAYA_REGISTRY_URL: ${{ vars.CLOUDRAYA_REGISTRY_URL }}
          CLOUDRAYA_REGISTRY_USERNAME: ${{ secrets.CLOUDRAYA_USERNAME }}
          CLOUDRAYA_REGISTRY_PASSWORD: ${{ secrets.CLOUDRAYA_PASSWORD }}

        run: |
          set -e
          ./deploy-cloudraya.sh

  deploy-to-k8s:
    needs: build
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        env:
          REGISTRY: registry.cloudraya.com/${{ secrets.CLOUDRAYA_USERNAME }}
          TAG: ${{ github.run_number }}
          NAMESPACE: ${{ vars.K8S_NAMESPACE || 'default' }}
          USE_PERSISTENT: ${{ vars.K8S_USE_PERSISTENT || 'false' }}
          USE_INGRESS: ${{ vars.K8S_USE_INGRESS || 'false' }}
          DOMAIN: ${{ vars.K8S_DOMAIN || '' }}
        run: |
          chmod +x deploy-to-k8s.sh

          # Skip build since we already built and pushed the image in the build job
          DEPLOY_ARGS="--registry $REGISTRY --tag $TAG --namespace $NAMESPACE --skip-build"

          # Add optional arguments based on environment variables
          if [ "$USE_PERSISTENT" = "true" ]; then
            DEPLOY_ARGS="$DEPLOY_ARGS --persistent"
          fi

          if [ "$USE_INGRESS" = "true" ]; then
            DEPLOY_ARGS="$DEPLOY_ARGS --ingress --domain $DOMAIN"
          fi

          # Run the deployment script
          ./deploy-to-k8s.sh $DEPLOY_ARGS

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ vars.K8S_NAMESPACE || 'default' }} -l app=customer-app
          kubectl get svc -n ${{ vars.K8S_NAMESPACE || 'default' }} -l app=customer-app
          if [ "${{ vars.K8S_USE_INGRESS || 'false' }}" = "true" ]; then
            kubectl get ingress -n ${{ vars.K8S_NAMESPACE || 'default' }}
          fi
